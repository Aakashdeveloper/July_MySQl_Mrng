What are aggregate functions?

Perform a calculation on data within a column and
return one result

SHOW DATABASES;
CREATE DATABASE ticket_booking;
use ticket_booking;

SELECT COUNT(*) FROM customers;
SELECT COUNT(first_name) from customers;

SELECT * FROM customers where first_name IS NULL;

SELECT SUM(no_seats) FROM rooms;

SELECT SUM(no_seats) FROM rooms WHERE id>1;

SELECT MAX(length_min)from films;
SELECT MIN(length_min)from films;
SELECT AVG(length_min)from films;

SELECT AVG(length_min)from films
where length_min >120;

# count number of unqiue customers who made a booking in october 2017

SELECT * FROM bookings;
SELECT COUNT(distinct(customer_id)) from bookings;
select * from bookings;

SELECT customer_id, screening_id, count(id) from bookings
Group BY customer_id, screening_id;


INSERT INTO bookings (screening_id, customer_id) 
VALUES (9,37);


SELECT customer_id, screening_id, count(id) from bookings
Group BY customer_id, screening_id
HAVING count(id)>1


///////////SubQueries////////
Non correlated
correlated
/////////////
[delhi,mumbai,amasterdam]


SELECT id,start_time fron screenings
where film_id IN(
    SELECT id FROM films where length_min>120
)


/////
Non correlated
///////
The inner query can run independently of the outer query

SELECT id,start_time fron screenings
where film_id IN(
    SELECT id FROM films where length_min>120
)

>>inner query run first and produces a result set which is 
than used by outer query


/////
Correlated
///////

The inner query cannot run independently of the outer query
the inner query for every row in the outer query

SELECT screening_id,customer_id,
(
    SELECT count(seat_id) from reserved_seat where booking_id = b.id
)
from bookings b


//////////
MySql functions
//////////

SELECT CONCAT(first_name,' ',last_name) As full_name from customers;

SELECT CONCAT("HI ",first_name," ",last_name," Your email_id is ",email) As details from customers;

SELECT name, substring(name,1,3)AS short_name from films;
SELECT name, substring(name,2,6)AS short_name from films;
SELECT name, substring(name,2)AS short_name from films;

SELECT name, Upper(name)AS cap_name from films;
SELECT name, lower(name)AS cap_name from films;

SELECT start_time from screenings;
SELECT start_time,DATE(start_time) from screenings;
SELECT start_time,DATE(start_time),Month(start_time) from screenings;

SELECT * from screenings where DATE(start_time) = '2017-10-04';

SELECT * from screenings where DATE(start_time) between '2017-10-03' AND '2017-10-04';


/////////////
User
//////////

use mysql;

show tables;
SELECT * from user;

create user 'bhumika'@'localhost' identified by 'admin987';
create user 'john'@'localhost' identified by 'admin987';

grant all privileges on *.* to 'bhumika'@'localhost';

grant select on ticket_booking.* to 'john'@'localhost';
drop user john@localhost

grant select on *.* to 'john'@'%';

/////////
Views
/////////
use ticket_booking;

select * from films;

create view filmview as  select id, name from films;

show tables;

select * from filmview;

select f.name, s.start_time from films f 
JOIN screenings s on f.id = s.film_id;

create view filnm_screen as select f.name, s.start_time from films f 
JOIN screenings s on f.id = s.film_id;

select * from filnm_screen;

create algorithm=temptable view filmview as select id,name from films


///Locks////
SHOW open tables;

Lock table films write;
UNLOCK TABLES;

LOCK TABLES  films write, rooms read;

SHOW open tables where in_use>0;

show full processlist;


//////

SELECT 5+10;
SELECT now();

set @length=120;
SELECT  name,length_min from films where length_min>@length;



/////backup/////
START Transaction;
INSERT into films(name,lenght_min) values('King of john',111);
SELECT * from films;
delete from films where id= 15;
savepoint test1

update films set name="Rambo2" where id= 14
rollback to test1

/////////
Stored procedure
SP
Triggers

////////////
gernal tables space
.frm


https://dev.mysql.com/doc/refman/5.7/en/create-tablespace.html
